# GIDE GitHub OAuth Environment Variables Configuration
# 
# This file contains the environment variables needed for GitHub OAuth authentication
# in the GIDE (GitHub Integrated Development Environment) project.
#
# SECURITY NOTE: Never commit this file with actual values to your repository.
# Use this as a template and create your own .env file with actual credentials.

# GitHub OAuth Application Credentials
# These values come from your GitHub OAuth App settings at:
# https://github.com/settings/developers (for personal apps)
# or https://github.com/organizations/YOUR_ORG/settings/applications (for org apps)

# GitHub OAuth Client ID (public, can be committed to repo)
GITHUB_CLIENT_ID=Ov23liQH0sYgeB4izNjP

# GitHub OAuth Client Secret (sensitive, should NOT be committed to repo)
# This should be injected at build time or runtime via secure environment variable management
GITHUB_CLIENT_SECRET=your_client_secret_here

# GitHub OAuth Redirect URI (for reference, not used in GIDE config)
# This should match one of the callback URLs configured in your GitHub OAuth app
GITHUB_REDIRECT_URI=vscode://vscode.github-authentication/did-authenticate

# Additional GitHub Configuration (optional)
GITHUB_USERNAME=GaryOcean428
GITHUB_USEREMAIL=braden.lang77@gmail.com

# Build Configuration
# Set to 'production' for production builds, 'development' for dev builds
NODE_ENV=development

# GIDE Version Information (optional)
GIDE_VERSION=1.0.0
GIDE_BUILD_NUMBER=1

# Instructions for Use:
# 1. Copy this file to .env in your GIDE project root
# 2. Replace 'your_client_secret_here' with your actual GitHub OAuth client secret
# 3. Add .env to your .gitignore file to prevent committing secrets
# 4. Configure your build system to load these environment variables
# 5. Update your CI/CD pipeline to inject the client secret securely

# For Docker deployments:
# Use Docker secrets or environment variable injection:
# docker run -e GITHUB_CLIENT_SECRET=your_secret gide:latest

# For Kubernetes deployments:
# Create a secret and reference it in your deployment:
# kubectl create secret generic github-oauth --from-literal=client-secret=your_secret

# For development:
# You can use tools like dotenv to load these variables:
# npm install --save-dev dotenv
# Then in your build script: require('dotenv').config()

# Gide Coding Agent Extension Configuration
# ========================================
# Environment variables for the Gide Coding Agent VSCode extension

# Required: Railway agent service endpoint
GIDE_AGENT_ENDPOINT=https://your-agent-service.railway.app/api/chat

# Optional: API key for agent authentication
GIDE_API_KEY=your_api_key_here

# Optional: AI model configuration  
GIDE_MODEL_PROVIDER=openai
GIDE_MODEL_NAME=gpt-4

# Optional: Request timeout in milliseconds (default: 30000)
GIDE_REQUEST_TIMEOUT=30000

# Optional: Enable debug logging
GIDE_DEBUG=false

# AI Provider API Keys - Critical for GIDE functionality
# =====================================================
# These should be set as Railway service variables for production
# Both client (VITE_) and server versions are supported for flexibility

# OpenAI API Configuration
VITE_OPENAI_API_KEY=sk-proj-your-openai-key-here
OPENAI_API_KEY=sk-proj-your-openai-key-here

# Anthropic (Claude) API Configuration  
VITE_ANTHROPIC_API_KEY=sk-ant-api03-your-anthropic-key-here
ANTHROPIC_API_KEY=sk-ant-api03-your-anthropic-key-here

# Perplexity API Configuration
VITE_PERPLEXITY_API_KEY=pplx-your-perplexity-key-here
PERPLEXITY_API_KEY=pplx-your-perplexity-key-here

# XAI (Grok) API Configuration
VITE_XAI_API_KEY=xai-your-xai-key-here
XAI_API_KEY=xai-your-xai-key-here

# Groq API Configuration
VITE_GROQ_API_KEY=gsk_your-groq-key-here
GROQ_API_KEY=gsk_your-groq-key-here

# Google Gemini API Configuration
VITE_GEMINI_API_KEY=your-gemini-key-here
GEMINI_API_KEY=your-gemini-key-here

# Supabase Configuration (for API key validation and monitoring)
# =============================================================
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key-here

# Deployment Health Monitoring Configuration
# ==========================================
HEALTHCHECK_URL=https://gide.up.railway.app/health
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_TIMEOUT=5000
HEALTH_CHECK_INTERVAL=30000

